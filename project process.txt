
#########################################################################################################
################################################# CH 01 #################################################
#########################################################################################################



######################## 1 - setting up the project process #############################################
	- create project 
		django-admin startproject [mysite]
	- create app
	- Active app in setting 
	- after make model conver to database by makemigratios ( commend)	
	- after makemigrations use migrate command


####################### 2 - make the model ##############################################################
	## field for model
	add title 
	add slug(label)
	add body(text)
	add creat(date)
	add update(date)
	add publish(data)
	
	## sorting and meta class 
	## change class behavior by meta class 
	sort by publish
	index filed for save publish data 

	## adding status
	## make a class that have 2 statuse df and pb

	make class 
	use statuse method 

	## Add user model 
	Author 

############################### 3 - Creating an administration site for models ####################
	Creating a superuser
		python manage.py createsuperuser
	The Django administration site
		python manage.py runserver
	Adding models to the administration site
		from .models import Post   ## Post is model in this sample 
		admin.site.register(Post)  ## register Post model in the admin panel 
	Customizing how models are displayed
	we could customize admin panel that how can show it by change model 
	With a few lines of code, we have customized the way the model is displayed on the administration
	site.
	we need define a class .
	in fact we make a class same "PostAdmin" that control Post model 
		from django.contrib import admin
		from .models import Post
		@admin.register(Post)
		class PostAdmin(admin.ModelAdmin):
			## customize filter and etc.

########################################	4- Define URL   #######################################
		for each app sepreatly then 
			import view 
			import liberry for path 
			use command ( show path , show view that we want to on URL , name for view )
		add app in URL setting project  
	## Creating own model manager . without it we should use object manager
	## for retrive Qury but for make own we immplement them 
		1 - make a class for new manager 
		2 - define defaoult manager and new custom manager in our model 

################################       create template      ##################################################	
	## create base template 
		# loaad static file command ( load all css and js file )
		# make HTML fromat file and 
		# insert where do I want to insert dynamic data by django template tag 


		## define the base according to content and sidebar 
			# content 
			# sidebar

	## create child template 
		# make HTML fromat file and 
		# insert where do I want to insert dynamic data by django template tag 

		1- start with inhretent mother template
		2- insert all in content block 
		3- decide what we want to show 
			3-1 show link that consider the name of post
			3-2 show a paragraph that show publsh date and author 
			3-3 show 30 word of the body of post 
		4- we want to run step 3 for all post then we use 'for loop'


		
#########################################################################################################
################################################# CH 02 #################################################
#########################################################################################################

## Goals 
	# Add functionality 
		1-conical URL : maybe differnt page that show same content . uniqe URL for each content  
		2-SEO freandly : date + slug of post name 
		3-Pagination : same below google number 
		4- send email
		5- comment functionality
	# learn django capebility 
		1-view class 
		2-django forms 


## 1-Canonical URL #########################################################################################
	maybe you use diffrent page that use same post . diff between PAGE and POST . make master
	copy for the post .
	# we need 3 task 
		1 - there is a method get_abseloute_url() in models object + we implement it 
			for post_detail to make canonical URL
		2 - use canonacl for post_detail
		3 - we need make URL by name and another option same date and etc. we can use 
			reverse() function in django.urls 


## 2-Creating SEO-friendly URLs for posts ##################################################################

	for SEO frendly for google index we need "date+url" and save it in database and it maust be uniqe

	# Model : change model 
		Save uniqe post slug+date 
	# View  : Change View 
		retrive post with special slug and date(year,month,day)
	# URL   : Change URLS 
		before imported view in URL for app ( blog ). before project post show by id but now we 
		consider them according to date+slug, then change URL 


## 3-1 Pagination ( by function ) #############################################################################
	 Show posts in number of page , split posts for pages
	django has built in class 

	# Change the view 
		goal : at least we want to get number and retrive posts for that number,below roadmap  
		1-import paginator object 
			from django.core.paginator import Paginator
		2-make a paginator object that save all post in paginator ( that get number and show them ) . 
			get 2 parametr ( all posts + number for split )
		3-get number of paginator page . get 2 parameter ( page + number of page that number is out of range )
		4-new post page that get pages and save posts for show 

		note : view give us tag to use it in template 

	# template 
		goal : we want to make global pagination template for use another place . in HTML 
			- we have 3 steps previous , current , next
			- for all define a dive and define class 
			- for each step define spine with class to change in css 
			- use if and endif 
			- FINAL : add this template the END of HTML 


3-1 Pagination (use class view ):

	Note : 
		- queryset is list of object from database
		- by quaryset we could access to all of field without changing 
		- we can sort and filter and etc.
		
	inherit form class ListView get us buildin paginate and we can set below attrbute  
		1-paginate_by : set number of paginage page 
		2-context_object_name : a atrebute that use in context(template) 
	

	view : for write class view the roadmap is below 
		- we should get all of data by Model.Object.all() and save it in queryset attrebute
		- we want to access to all query in context ( teppmlate ) or show what filterd 
			data that I want . 
		- we don't want to change the template for easy to undrestanding then we consider 
			<< context_object_name = 'posts' >> , in fact we use posts to context variable .
			we could show the data that I want .
	template : becuse we use calss view situted function view we use attrebute <<page_obj>>
		but in function we use <<page=posts>> but in view class page_obj save data for 
		each page 
	URL : change the url compatible to view class
		first arg is link of page 
		second is view class 
		third is name for view 



## 4-send email  #################################################################################################
	I want to recommend post by email to another people

	roadmap
		4-1 create form for get information
		4-2 create view for handle form information and send email 
			4-2-1 handle data and validation in view 
			4-2-2 setup and configoyration for send email
			4-2-3 send email in view 
		4-3 config URL in applicaion and connect it to view 
		4-4 design template to show form and message neseccery for share
		

	4-1 create form for get information ---------------------------------------------------------------------------
		django give us form framework
		form framwork has two class <<Form>> and <<ModelForm>>
		form framework help us 
			- define field
			- display field
			- validate input
			- render form in html and handle data 
		

		create form.py code 
			define a class extend Form
				define name
				define to ( recipe) 
				define subject 
				define comment 

			Note :
				each argument in field ( i.e charField , EmailField ) has widget
				widget show how render filed in html text or email or ... 

	4-2 create view for handle form information and send email---------------------------------------------------------------
		4-2-1 handle form information in view 
			import form from form 

			define a function that ( for argument )
				- get request 
				- get post by id
			- retrive all post ( arg : requst and post by id )
			- if : form fill (get request == 'POST' as parameter ) 
				- make instance of form object that submitted (get request == 'POST' as parameter)
				- validate above object 
				- if validate is true sent it
			- else : again make a instance of form ( don't request data parameter becuse don't fill form )
			- reteurn render : render html file by inject form and post tag variable 
				arg:
					get requset 
					html link 
					tag variable 

			NOTE : request is an object that save all information from user when he visit specific URL.
				   same URL path,IP,cookie,Http meyhod( GET.POST,DELETE,PUT) and etc. 

		4-2-2 setup and configoyration for send email
			we should configoure and se SMTP protocol for send e-mail 
			we can use 2 way SMTP protocal 
				locla SMTP : best for test app 
				external SMTP server : real project we can use google sever or another smtp server 
			set code setting smtp in setting.py

		4-2-3 send email in view 
			before we should config email SMTP ( local or external ) in setting 

			overall : 
			for send in view overall step are 
			- retrive e-mail by id post 
			- set a variable by flag for email sent or not 
			- handle form submision 
			- check data validation 
			- send data if valid 
			- render in Html file 

			detail : 

			- reterive by get_object_or_404 
			- set send_email = False
			- if request mthod == 'POST' mean form submitted
				- make instance a form with submitted data ( requst.POST) 
				- if form data inpouted is valid ( form.is_valid)
					- make insatance data valided of Form
					- make a standard URL post by request.build_absolute_uri
					- send email before 
						- make subject from post and data of form 
						- make message from post and data of from 
						- send mail by above data 
						- chagne the email_send flag=True
			- if form not filled or not passed validation, make instance of form 
			 
	4-3 config URL in applicaion and connect it to view -------------------------------------------
	 
		path(format of url , view function or class that handle url , name of view)

		** Note : structure of URL that handle by view ( as argument ) define in URL 
		pattern 
			- structure url define in urlpattern file 
			- view handle data and retrive data from database and send to template by tag 
			- templat an html file show result 

	4-4 design template to show form and message neseccery for share -------------------------------

		- we make a form in view by POST http request 
		- show it by form POST
		- check sent variable 
			- if true show message for sent 
			- if false show form 

		Note : all routin for template 
			- extend from base 
			- start by title block 
			- and content block 


## 5- comment functionality ###########################################################################
	Roadmap :
		5-1 create model to save data in database 
			5-1-1 create model 
			5-1-2 connect to admin 
		5-2 create form to get data and handle validation 
		5-3 create view to get data from form and connect and manupolated databse 
		5-4 create template that make form and add list of comment in post details 


		5-1 create model to save data in database -----------------------------------------------------
			5-1-1 create model 

			 craete model class that crate databsae 
			 	create post that related to Post Model
			 	name
				email
				body
				creted time 
				updated time 
				comment activated 

				calss meta
					define order by cascade date ( last is first ) on created attrebute
					index order data for better speed show result on created attrebute 
					
				define str method to show atrrebute of class 

			** Note : 
				post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')

				ForeignKey use when we want to related one model to another mode 
				in above case comment related to Post mode 

				by ForeignKey comment we defilne 
					which model to conected 
					How delated the comment that related to model 
					name "comments" let us access to post comments by this atrrebute

				auto_now_add=True : use for created model becuse we want to save time date on create model  
    			auto_now=True : use for updated model 

			** Note : Metadata define in Meta Class get us more configouration and optimaiztaion
				for model class same uniqe data, sort , indexes and etc for Ordering,Indexes,
				Constraints,Permissions,Custom table names. in fact metadata and meta class is same 

			** Note : after change the model in fact we change the databsae use below command
				python manage.py makemigrations [app_name] : this command serach what change in model 
				python manage.py migrate : applay all change according by above command 

		5-1-2 connect to admin
			we need see comment in admin for manage

			** Note :
				CommentAdmin : Subclass of admin.ModelAdmin django framework for change admin interface 

			** Note : 
			DECORETOR : by decoretor we add functinality to a function or class without chabging it 
				@admin.register(Comment)
				class CommentAdmin(admin.ModelAdmin):
					... 

				in above decoretor we add functionality of below code 
				lass CommentAdmin(admin.ModelAdmin):
					...

				to @admin.register(Comment)

			 











